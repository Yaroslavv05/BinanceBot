import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from binance.client import Client
import asyncio
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from Config import API_KEY, SECRET_KEY, TOKEN
from DateFutures import DateFutures
from DateSpot import DateSpot

storage = MemoryStorage()
client = Client(API_KEY, SECRET_KEY)
TOKEN = TOKEN
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)
markup0 = ReplyKeyboardMarkup(resize_keyboard=True)
markup0.add('–ù–∞—á–∞—Ç—å!')
markup4 = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
markup4.add('5 –º–∏–Ω', '15 –º–∏–Ω', '60 –º–∏–Ω', '240 –º–∏–Ω')
markup5 = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
markup5.add('üíµ –ü–æ–∫—É–ø–∞—Ç—å/–ø—Ä–æ–¥–∞–≤–∞—Ç—å –º–æ–Ω–µ—Ç–∫—É', 'ü§ë –¢–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö', '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
markup6 = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
markup6.add("–ù–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", '–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å', '–û—Ç–º–µ–Ω–∞!')
markup2 = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
markup2.add('–¶–µ–Ω–∞ –º–æ–Ω–µ—Ç–∫–∏', '–£–∑–Ω–∞—Ç—å –∑–∞ –∫–∞–∫—É—é —Ü–µ–Ω—É –º—ã –∫—É–ø–∏–ª–∏/–ø—Ä–æ–¥–∞–∂—É –º–æ–Ω–µ—Ç–∫—É', '–í—Å–µ –æ—Ä–¥–µ—Ä–∞ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞ —ç—Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ', '–í—ã–≤–æ–¥ —Ü–µ–Ω –º–æ–Ω–µ—Ç–∫–∏ –∑–∞ 5/15 –º–∏–Ω', '–û—Ç–º–µ–Ω–∞!')
markup1 = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
markup1.add('–ù–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å', '–°—á–µ—Ç –∫–æ—à–µ–ª—å–∫–∞', '–û—Ç–º–µ–Ω–∞!')
f = open('../–¶–µ–Ω–∞ –∑–∞ –ø–æ–∫—É–ø–∫—É.txt', 'r')
n = open('../–¶–µ–Ω–∞ –∑–∞ –ø—Ä–æ–¥–∞–∂—É.txt', 'r')
price_5m = open('../–¶–µ–Ω—ã –∑–∞ 5 –º–∏–Ω.txt', 'w')
price_15m = open('../–¶–µ–Ω—ã –∑–∞ 15 –º–∏–Ω.txt', 'w')
price_5m_r = open('../–¶–µ–Ω—ã –∑–∞ 5 –º–∏–Ω.txt', 'rb')
price_15m_r = open('../–¶–µ–Ω—ã –∑–∞ 15 –º–∏–Ω.txt', 'rb')

@dp.message_handler(commands=['start'])
async def welcome(message: types.Message):
    await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}\n–Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π —Ç–æ—Ä–≥—É–µ—Ç –Ω–∞ Binance\n–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —Ä–æ–±–æ—Ç—É –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å!"', reply_markup=markup0)

class FSMcoin_price(StatesGroup):
    name = State()
class FSMcoin_price_avg(StatesGroup):
    name = State()
class FSMtrade_coin(StatesGroup):
    full_name_coin = State()
    name_coin = State()
    pair = State()
    colvo_coin = State()
    profit_spot = State()
    avg_time = State()
class FSMFuturesTrade(StatesGroup):
    name_coin_futures = State()
    leverage = State()
    sum_usdt = State()
    profit = State()
    name_coin = State()
@dp.message_handler(content_types=['text'], state=None)
async def bot_func(message: types.Message):
    print(f"id: {message.from_user.id} | Name: {message.from_user.full_name} | Msg: {message.text} | Time: {message.date}")
    if message.text == '–ù–∞—á–∞—Ç—å!':
        await bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markup5)
    elif message.text == 'üíµ –ü–æ–∫—É–ø–∞—Ç—å/–ø—Ä–æ–¥–∞–≤–∞—Ç—å –º–æ–Ω–µ—Ç–∫—É':
        await bot.send_message(message.from_user.id, '–í—ã–±–∏—Ä–∞–π—Ç–µ:', reply_markup=markup1)
    elif message.text == 'ü§ë –¢–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö':
        await bot.send_message(message.from_user.id, '–í—ã–±–∏—Ä–∞–π—Ç–µ:', reply_markup=markup6)
    elif message.text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞':
        await bot.send_message(message.from_user.id, '–í—ã–±–∏—Ä–∞–π—Ç–µ:', reply_markup=markup2)
    elif message.text == '–û—Ç–º–µ–Ω–∞!':
        await bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markup5)
    elif message.text == '–¶–µ–Ω–∞ –º–æ–Ω–µ—Ç–∫–∏':
        await FSMcoin_price.name.set()
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT')

        @dp.message_handler(state=FSMcoin_price.name)
        async def coin_price_vuvod(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['name'] = message.text
            if len(data['name']) == 7 or len(data['name']) == 8:
                price_all = client.get_symbol_ticker(symbol=data['name'])
                price = str(float(price_all.get('price')))
                await bot.send_message(message.from_user.id, price + ' $', reply_markup=markup2)
                await state.finish()
            elif len(data['name']) <= 6 or len(data['name']) >= 9:
                await FSMcoin_price.name.set()
                await bot.send_message(message.from_user.id, '–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 7/8 —Å–∏–º–≤–æ–ª–æ–≤!\n\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ')

                @dp.message_handler(state=FSMcoin_price.name)
                async def coin_price_vuvod(message: types.Message, state: FSMContext):
                    async with state.proxy() as data:
                        data['name'] = message.text
    elif message.text == '–í—ã–≤–æ–¥ —Ü–µ–Ω –º–æ–Ω–µ—Ç–∫–∏ –∑–∞ 5/15 –º–∏–Ω':
        await FSMcoin_price_avg.name.set()
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏:')

        @dp.message_handler(state=FSMcoin_price_avg.name)
        async def coin_avg_vuvod(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['name'] = message.text
            if len(data['name']) == 7 or len(data['name']) == 8:
                klines_5m = client.get_historical_klines(data['name'], Client.KLINE_INTERVAL_5MINUTE, '1 day UTC')
                for i in range(len(klines_5m)):
                    a_5 = klines_5m[i]
                    price_5m.write(str(float(a_5[3])) + ' $' + '\n')
                klines_15m = client.get_historical_klines(data['name'], Client.KLINE_INTERVAL_15MINUTE, '1 day UTC')
                for i in range(len(klines_15m)):
                    a_15 = klines_15m[i]
                    price_15m.write(str(float(a_15[3])) + ' $' + '\n')
                price_5m.close()
                price_15m.close()
                await bot.send_document(message.from_user.id, price_5m_r)
                await bot.send_document(message.from_user.id, price_15m_r)
            elif len(data['name']) <= 6 or len(data['name']) >= 8:
                await FSMcoin_price_avg.name.set()
                await bot.send_message(message.from_user.id, '–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 7/8 —Å–∏–º–≤–æ–ª–æ–≤!\n\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ')

                @dp.message_handler(state=FSMcoin_price_avg.name)
                async def coin_avg_vuvod(message: types.Message, state: FSMContext):
                    async with state.proxy() as data:
                        data['name'] = message.text
    elif message.text == '–ù–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å':
        balance = client.get_asset_balance(asset='USDT')
        balance_get = float(balance.get('free'))
        if balance_get > 10:
            await bot.send_message(message.from_user.id, '‚ùóÔ∏è –°—Ä–µ–¥—Å—Ç–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚ùóÔ∏è')
        elif balance_get >= 10:
            await FSMtrade_coin.full_name_coin.set()
            await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT')

            @dp.message_handler(state=FSMtrade_coin.full_name_coin)
            async def coin_avg_vuvod(message: types.Message, state: FSMContext):
                async with state.proxy() as data:
                    data['full_name_coin'] = message.text
                await FSMtrade_coin.next()
                if len(data['full_name_coin']) <= 6 or len(data['full_name_coin']) >= 9:
                    await FSMtrade_coin.full_name_coin.set()
                    await bot.send_message(message.from_user.id, '–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 7/8 —Å–∏–º–≤–æ–ª–æ–≤!\n\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ')
                elif len(data['full_name_coin']) == 7 or len(data['full_name_coin']) == 8:
                    await FSMtrade_coin.name_coin.set()
                    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:BTC')

                    @dp.message_handler(state=FSMtrade_coin.name_coin)
                    async def coin_avg_vuvod(message: types.Message, state: FSMContext):
                        async with state.proxy() as data:
                            data['name_coin'] = message.text
                        await FSMtrade_coin.next()
                        if len(data['name_coin']) <= 2 or len(data['name_coin']) >= 5:
                            await FSMtrade_coin.name_coin.set()
                            await bot.send_message(message.from_user.id, '–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3/4 —Å–∏–º–≤–æ–ª–æ–≤!\n\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ')
                        elif len(data['name_coin']) == 3 or len(data['name_coin']) == 4:
                            await FSMtrade_coin.pair.set()
                            await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:USDT")

                            @dp.message_handler(state=FSMtrade_coin.pair)
                            async def coin_avg_vuvod(message: types.Message, state: FSMContext):
                                async with state.proxy() as data:
                                    data['pair'] = message.text
                                await FSMtrade_coin.next()
                                if len(data['pair']) <= 2 or len(data['pair']) >= 5:
                                    await FSMtrade_coin.pair.set()
                                    await bot.send_message(message.from_user.id, '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3/4 —Å–∏–º–≤–æ–ª–æ–≤!\n\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ')
                                elif len(data['pair']) == 3 or len(data['pair']) == 4:
                                    await FSMtrade_coin.colvo_coin.set()
                                    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–∞–∫–æ–µ –∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 1')

                                    @dp.message_handler(state=FSMtrade_coin.colvo_coin)
                                    async def coin_avg_vuvod(message: types.Message, state: FSMContext):
                                        async with state.proxy() as data:
                                            data['colvo_coin'] = float(message.text)
                                        await FSMtrade_coin.next()
                                        if data['colvo_coin'] <= 0.00042:
                                            await FSMtrade_coin.colvo_coin.set()
                                            await bot.send_message(message.from_user.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç - 0,00043 BTC ‚âà 10$\n\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ')
                                        elif data['colvo_coin'] >= 0.00043:
                                            await FSMtrade_coin.profit_spot.set()
                                            await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–∞–∫—É—é –ø—Ä–∏–±—ã–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤ —Ü–µ–Ω—Ç–∞—Ö:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 0.03')

                                            @dp.message_handler(state=FSMtrade_coin.profit_spot)
                                            async def coin_avg_vuvod(message: types.Message, state: FSMContext):
                                                async with state.proxy() as data:
                                                    data['profit_spot'] = float(message.text)
                                                await FSMtrade_coin.next()
                                                if data['profit_spot'] < 0.01:
                                                    await FSMtrade_coin.profit_spot.set()
                                                    await bot.send_message(message.from_user.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ - 0.01\n\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ')
                                                elif data['profit_spot'] >= 0.01:
                                                    await FSMtrade_coin.avg_time.set()
                                                    await bot.send_message(message.from_user.id,'–í–≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –±—É–¥–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å –º–æ–Ω–µ—Ç–∫–∏:', reply_markup=markup4)

                                                    @dp.message_handler(state=FSMtrade_coin.avg_time)
                                                    async def coin_avg_vuvod(message: types.Message, state: FSMContext):
                                                        async with state.proxy() as data:
                                                            data['avg_time'] = message.text
                                                            main_spot = DateSpot(message.from_user.id, data['full_name_coin'], data['name_coin'], data['pair'], data['colvo_coin'], data['profit_spot'], data['avg_time'])
                                                            main_spot.input_date()
                                                        if data['avg_time'] == '5 –º–∏–Ω':
                                                            await bot.send_message(message.from_user.id, '–ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É!\n\n–ë—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å:\n–ú–æ–Ω–µ—Ç–∫–æ–π - ' + data['full_name_coin'] + '\n–ö–æ–ª-–≤–æ –º–æ–Ω–µ—Ç - ' + str(data['colvo_coin']) + '\n–ü—Ä–æ—Ñ–∏—Ç - ' + str(data['profit_spot']) + ' $\n–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è - ' + data['avg_time'])
                                                        else:
                                                            await FSMtrade_coin.avg_time.set()
                                                            await bot.send_message(message.from_user.id, '‚ùóÔ∏è –û—à–∏–±–∫–∞ ‚ùóÔ∏è\n\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
    elif message.text == '–°—á–µ—Ç –∫–æ—à–µ–ª—å–∫–∞':
        assets_ada = client.get_asset_balance(asset='ADA')
        ada_balance = assets_ada.get('free')
        assets_bnb = client.get_asset_balance(asset='BNB')
        bnb_balance = assets_bnb.get('free')
        assets_xrp = client.get_asset_balance(asset='XRP')
        xrp_balance = assets_xrp.get('free')
        assets_usdt = client.get_asset_balance(asset='USDT')
        usdt_balance = assets_usdt.get('free')
        ada_price = client.get_symbol_ticker(symbol='ADAUSDT')
        symvol = ada_price.get('symbol')
        price = ada_price.get('price')
        bnb_price = client.get_symbol_ticker(symbol='BNBUSDT')
        b_price = bnb_price.get('price')
        xrp_price = client.get_symbol_ticker(symbol='XRPUSDT')
        x_price = xrp_price.get('price')
        await bot.send_message(message.from_user.id, '–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ USDT: ' + str(float(usdt_balance)) + '\n–ú–æ–Ω–µ—Ç–æ–∫ ADA: ' + str(float(ada_balance)) + ' —à—Ç. ' + '–≤ $ 1 —à—Ç. = ' + str(float(price)) + '\n–ú–æ–Ω–µ—Ç–æ–∫ BNB: ' + str(float(bnb_balance)) + ' —à—Ç. ' + '–≤ $ 1 —à—Ç. = ' + str(float(b_price)) + '\n–ú–æ–Ω–µ—Ç–æ–∫ XRP: ' + str(float(xrp_balance)) + ' —à—Ç. ' '–≤ $ 1 —à—Ç. = ' + str(float(x_price)))
    elif message.text == '–£–∑–Ω–∞—Ç—å –∑–∞ –∫–∞–∫—É—é —Ü–µ–Ω—É –º—ã –∫—É–ø–∏–ª–∏/–ø—Ä–æ–¥–∞–∂—É –º–æ–Ω–µ—Ç–∫—É':
        for line in f:
            await bot.send_message(message.from_user.id, '–¶–µ–Ω–∞ –∑–∞ –ø–æ–∫—É–ø–∫—É —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:  ' + line + '  $')
        for line3 in n:
            await bot.send_message(message.from_user.id, '–¶–µ–Ω–∞ –∑–∞ –ø—Ä–æ–¥–∞–∂—É —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:  ' + line3 + '  $')
        f.close()
        n.close()
    elif message.text == '–í—Å–µ –æ—Ä–¥–µ—Ä–∞ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞ —ç—Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ':
        await FSMFuturesTrade.name_coin.set()
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:\n\n(–ï–°–õ–ò –ù–ò–ß–ï–ì–û –ù–ï –í–´–í–û–î–ò–¢–¨–°–Ø –ó–ù–ê–ß–ò–¢ –° –î–ê–ù–ù–û–ô –ú–û–ù–ï–¢–û–ô –ù–ò–ß–ï–ì–û –ù–ï –ü–†–û–ò–°–•–û–î–ò–õ–û –£ –í–ê–° –ù–ê –ê–ö–ö–ê–£–ù–¢–ï)')

        @dp.message_handler(state=FSMFuturesTrade.name_coin)
        async def name_coin_futures(message: types.Message, state: FSMContext):
             async with state.proxy() as data:
                 data['name_coin'] = message.text
             order = client.get_all_orders(symbol=data['name_coin'])
             element_count = len([item for item in order])
             for i in range(element_count):
                 order_symbol = order[i].get('symbol')
                 order_price = order[i].get('price')
                 order_origQty = order[i].get('origQty')
                 order_cummulativeQuoteQty = order[i].get('cummulativeQuoteQty')
                 order_side = order[i].get('side')
                 await bot.send_message(message.from_user.id, '–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏: ' + order_symbol + '\n–¶–µ–Ω–∞ –∑–∞ –∫–æ—Ç–æ—Ä—É—é –∫—É–ø–∏–ª–∏/–ø—Ä–æ–¥–∞–ª–∏ –º–æ–Ω–µ—Ç–∫—É: ' + order_price + '\n–ö–æ–ª-–≤–æ –º–æ–Ω–µ—Ç–æ–∫ –∫–æ—Ç–æ—Ä—ã—Ö –∫—É–ø–∏–ª–∏/–ø—Ä–æ–¥–∞–ª–∏: ' + order_origQty + '\n–°—É–º–º–∞ –º–æ–Ω–µ—Ç–æ–∫ –∫–æ—Ç–æ—Ä—ã—Ö –º—ã –∫—É–ø–∏–ª–∏/–ø—Ä–æ–¥–∞–ª–∏: ' + order_cummulativeQuoteQty + '\n–ß—Ç–æ –º—ã —Å —ç—Ç–æ–π –º–æ–Ω–µ—Ç–∫–æ–π —Å–¥–µ–ª–∞–ª–∏: ' + order_side)
             await state.finish()
    elif message.text == '–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å':
        balance_futures = client.futures_account_balance()
        balance_futures_get = float(balance_futures[6].get('balance'))
        balance_futures_get_round = str(round(balance_futures_get, 2))
        await bot.send_message(message.from_user.id, '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + balance_futures_get_round + ' $', reply_markup=markup6)
    elif message.text == '–ù–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é':
        open_orders_futures = client.futures_get_open_orders()
        open_orders_futures_len = len(open_orders_futures)
        if open_orders_futures_len == 0:
            await FSMFuturesTrade.name_coin_futures.set()
            await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ–µ—Ç–∫–∏:')

            @dp.message_handler(state=FSMFuturesTrade.name_coin_futures)
            async def name_coin_futures(message: types.Message, state: FSMContext):
                async with state.proxy() as data:
                    data['name_coin_futures'] = message.text
                await FSMFuturesTrade.next()
                if len(data['name_coin_futures']) <= 6 or len(data['name_coin_futures']) >= 9:
                    await FSMFuturesTrade.name_coin_futures.set()
                    await bot.send_message(message.from_user.id,
                                           '–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 7/8 —Å–∏–º–≤–æ–ª–æ–≤!\n\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ')
                elif len(data['name_coin_futures']) == 7 or len(data['name_coin_futures']) == 8:
                    await FSMFuturesTrade.leverage.set()
                    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ:')

                    @dp.message_handler(state=FSMFuturesTrade.leverage)
                    async def name_coin_futures(message: types.Message, state: FSMContext):
                        async with state.proxy() as data:
                            data['leverage'] = int(message.text)
                        await FSMFuturesTrade.next()
                        if data['leverage'] <= 0 or data['leverage'] >= 126:
                            await FSMFuturesTrade.leverage.set()
                            await bot.send_message(message.from_user.id,
                                                   '–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç 1 –¥–æ 125!\n\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ')
                        else:
                            await FSMFuturesTrade.sum_usdt.set()
                            balance_futures_trade = client.futures_account_balance()
                            balance_futures_trade_get = round(float(balance_futures_trade[6].get('balance')), 2)
                            await bot.send_message(message.from_user.id,
                                                   '–í–≤–µ–¥–∏—Ç–µ –∫–∞–∫—É—é —Å—É–º–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å:\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: ' + str(
                                                       balance_futures_trade_get) + ' $')

                            @dp.message_handler(state=FSMFuturesTrade.sum_usdt)
                            async def name_coin_futures(message: types.Message, state: FSMContext):
                                async with state.proxy() as data:
                                    data['sum_usdt'] = float(message.text)
                                if data['sum_usdt'] <= 0 or data['sum_usdt'] > balance_futures_trade_get:
                                    await FSMFuturesTrade.sum_usdt.set()
                                    await bot.send_message(message.from_user.id, '–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤—ã—à–∞—Ç—å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏  –±—ã—Ç—å –º–µ–Ω—å—à–µ 0!\n\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ')
                                else:
                                    await FSMFuturesTrade.profit.set()
                                    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–∞–∫–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 1')

                                    @dp.message_handler(state=FSMFuturesTrade.profit)
                                    async def name_coin_futures(message: types.Message, state: FSMContext):
                                        async with state.proxy() as data:
                                            data['profit'] = float(message.text)
                                            main = DateFutures(message.from_user.id, data['name_coin_futures'], data['leverage'], data['sum_usdt'], data['profit'])
                                            main.input_date()
                                        if data['profit'] <= 0:
                                            await FSMFuturesTrade.profit.set()
                                            await bot.send_message(message.from_user.id, '–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—è—Ç—å—Å—è 0\n\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ')
                                        elif data['profit'] > 0:
                                            main.get_info()
        elif open_orders_futures_len > 0:
            await bot.send_message(message.from_user.id, '‚ùóÔ∏è –ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚ùóÔ∏è\n\n–û–∂–∏–¥–∞–π—Ç–µ', reply_markup=markup5)
    else:
        await bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup5)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
else:
    print('–±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!')